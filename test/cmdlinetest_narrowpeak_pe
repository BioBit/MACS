#!/bin/bash

# integrative subcmds testing

if [ $# -lt 1 ];then
    echo "Run all tests for subcommands of MACS2. Need 1 parameter for a tag name! A unique string combining date, time and MACS2 version is recommended. ./test.sh <TAG>"
    exit
fi

# test all sub-commands
TAG=$1

CHIP=CTCF_SE_ChIP_chr22_50k.bed.gz
CTRL=CTCF_SE_CTRL_chr22_50k.bed.gz

CHIPPE=CTCF_PE_ChIP_chr22_50k.bam
CTRLPE=CTCF_PE_CTRL_chr22_50k.bam

CHIPBEDPE=CTCF_PE_ChIP_chr22_50k.bedpe.gz
CTRLBEDPE=CTCF_PE_CTRL_chr22_50k.bedpe.gz

CHIPCONTIGS50K=contigs50k.bed.gz

CHIPBIGSPEEDTEST=CTCF_12878_5M.bed.gz
CTRLBIGSPEEDTEST=input_12878_5M.bed.gz

# callpeak
echo "1. callpeak"

mkdir ${TAG}_run_callpeak_pe_narrow
mkdir ${TAG}_run_callpeak_narrow

macs2 callpeak -g 52000000 -t $CHIP -c $CTRL -n run_callpeak_narrow0 -B --outdir ${TAG}_run_callpeak_narrow --cutoff-analysis &> ${TAG}_run_callpeak_narrow/run_callpeak_narrow0.log

cat ${TAG}_run_callpeak_narrow/run_callpeak_narrow0.log

macs2 callpeak -g 52000000 -f BAMPE -t $CHIPPE -c $CTRLPE -n run_callpeak_bampe_narrow -B --outdir ${TAG}_run_callpeak_pe_narrow --call-summits --verbose 3 &> ${TAG}_run_callpeak_pe_narrow/run_callpeak_bampe_narrow.log

cat ${TAG}_run_callpeak_pe_narrow/run_callpeak_bampe_narrow.log

echo "2. search for errors or warnings in log files"
flag=0
for i in `ls ${TAG}_run_*/*.log`;do
    echo " checking $i..."
    egrep -A 2 -B 2 -i "error|warning" $i;
    if [[ $? == 0 ]];then
	echo " ... error/warning found!"
	let "flag=1";
    else
	echo " ... clear!"
    fi
done;

if [[ $flag == 1 ]]; then
    echo " Error or Warning can be found! Quit the test!"
    exit 1;
fi

echo "3. compare with standard outputs"

flag=0
# we do not check the consistency of random subsampling results
subfolders=(callpeak_pe_narrow callpeak_narrow)

m=0
n=0
for i in ${subfolders[@]};do
    let "m+=1"
    let "n=0"
    for j in `ls standard_results_${i}/*`; do
	k=`basename $j`
	let "n+=1"
	echo "14.${m}.${n} checking $i $k ..."
	fq=${TAG}_run_${i}/${k}
	fs=standard_results_${i}/${k}
	if [ ! -f "$fq" ]; then
	    continue
	fi
	sort $fq > tmp_fq.txt
	sort $fs > tmp_fs.txt
	d=`diff tmp_fq.txt tmp_fs.txt`
	if [ -z "$d" ]; then
	    echo " ... success!"
	else
	    echo " ... failed! Difference:"
	    diff tmp_fq.txt tmp_fs.txt | head -10
	    let "flag=1";
	fi
    done
done
rm -f tmp_fq.txt tmp_fs.txt

# exit with 1 if test fails
if [ $flag -eq 1 ];then
    exit $flag;
fi

# END of test
